*ime-plugin.txt*
                                                          ime.vim 套件開發文件

==============================================================================
目錄

1.  介紹....................................|ime-plugin-introduction|
    1.1 套件資訊............................|ime-plugin-metadata|
2.  目錄結構................................|ime-plugin-structure|
    2.1 需要載入龐大資料的套件..............|ime-plugin-with-huge-data|
3.  套件核心 - handler......................|ime-plugin-handler|
    3.1 Handler - 複雜的判斷................|ime-plugin-complex-handler|
4.  Vim 7.3 的問題..........................|ime-plugin-for-vim-7.3|

==============================================================================
1.  介紹                                             *ime-plugin-introduction*

ime.vim 能夠載入第三方的套件，擴充自己的輸入能力。

1)  Standalone 套件自成一個輸入模式，
    在選擇模式時會顯示在選單中，有自己的圖示和說明。

2)  Embedded 套件內嵌在各個輸入模式中，優先於各個輸入模式，
    相當於對輸入法字根表的擴充。

------------------------------------------------------------------------------
1.1 套件資訊                                             *ime-plugin-metadata*

要讓 ime.vim 正確載入，套件需要提供必要的資訊：

- Type: |string|，"standalone" 或是 "embedded"。
- Pattern: |regex|，表示該套件所能處理的字串。
- Handler: |Funcref|，根據比對到的字串回傳可用的選項。
- Trigger: |List|[|string|]，列出能夠觸發該輸入模式的按鍵。

Standalone 套件需要額外提供兩項資訊：

- Icon: |string|，在選擇輸入模式時顯示，以及在 statusline 中顯示。
- Description: |string|，在選擇輸入模式時顯示。

除此之外，套件需要訂定一個名稱： plugin-name
讓使用者加在 |g:ime_plugins| 之中。

這些資訊需要包裝成一個物件並透過 *ime#{plugin-name}#info()* 回傳：
>
    function ime#{plugin-name}#info()
        return {
            \ 'type': 'standalone' / 'embedded',
            \ 'pattern': {regex},
            \ 'handler': {function},
            \ 'icon': '[En]',
            \ 'description': {description},
            \ 'trigger': ['<space>', '3', '4', '6', ...],
            \ }
    endfunction
<
==============================================================================
2.  目錄結構                                            *ime-plugin-structure*

ime.vim 的套件建議依照以下的目錄結構放置檔案：
>
    {plugin-folder}/
    |-- autoload/
    |   `-- ime_{plugin-name}.vim
    `-- README
<
*ime_{plugin-name}.vim* 為套件的主要檔案，建議的內容為：
>
    function! s:Handler (matchobj)
        " plugin logic here
    endfunction

    function! ime_{plugin-name}#info()
        return {
            \ 'type': 'standalone',
            \ 'icon': '[eg]',
            \ 'description': 'An example',
            \ 'pattern': '.*$',
            \ 'handler': function("s:Handler"),
            \ 'trigger': ['<space>', '3', '4', '6', ...],
            \ }
    endfunction
<
請依照自己的需求對以上的內容做調整。
注意 handler 的值為 function("s:Handler")，引號不可省略。

------------------------------------------------------------------------------
2.1 需要載入龐大資料的套件                         *ime-plugin-with-huge-data*

若套件需要載入龐大的資料，可以利用 vim 的 |autoload| 功能

在 {plugin-folder}/autoload/ 目錄裡增加一個 *ime_{plugin-name}_table.vim* 檔案：
>
    let s:table = {}
    let s:table['key_1'] = [...]
    let s:table['key_2'] = [...]
    ...
    let s:table['key_n'] = [...]

    function! ime_{plugin-name}_table#table ()
        return s:table
    endfunction
<

|ime_{plugin-name}.vim| 檔案調整為：
>
    let s:table = {}

    function! s:Handler (matchobj)
        if s:table == {}
            let s:table = ime_{plugin-name}_table#table()
        endif

        " plugin logic here
    endfunction

    function! ime_{plugin-name}#info()
        return {
            \ 'type': 'standalone',
            \ 'icon': '[eg]',
            \ 'description': 'An example',
            \ 'pattern': '.*$',
            \ 'handler': function("s:Handler"),
            \ 'trigger': ['<space>', '3', '4', '6', ...],
            \ }
    endfunction
<
==============================================================================
3.  套件核心 - handler                                    *ime-plugin-handler*

套件的核心功能由 handler 提供。

ime.vim 會將套件提供的 pattern 傳入 |matchlist()| 進行比對。
若比對成功，該結果（一個 |List|）會被傳入套件提供的 handler。

handler 需要對比對結果進行處理及判斷，並回傳一個 |List|，包含可用的選項。
回傳選項的順序可以由套件自行決定。

輸入時產生的選單透過 |complete()| 產生，每個選項可以帶有說明文字，
詳細資訊請見 |complete-items|。

套件提供的 pattern 可以包含 regex groups（請參考 |\1|），
提供 handler 判斷使用。

------------------------------------------------------------------------------
3.1 Handler - 複雜的判斷                          *ime-plugin-complex-handler*

有些套件需要做很複雜的判斷，例如嘸蝦米模式會做多階段的比對，
每次放棄一部份的字串，這樣複雜程度只靠 pattern 處理是非常困難的。

因此，ime.vim 允許 handler 回傳 |Dictionary|，包含兩個 key：

- "len": 實際上比對到的長度
- "options": 比對到可用的選項

例如 ime.vim 根據 pattern 比對到 ".[,stare"，傳入 handler。
但 handler 決定只有 ",stare" 能被比對為 "ಠ_ಠ"，
此時應回傳
>
    {
    \ 'len': 6,
    \ 'options': ['ಠ_ಠ']
    \ }
<
使 ime.vim 把 ".[,stare" 取代為 ".[ಠ_ಠ"

若直接回傳 ['ಠ_ಠ']，ime.vim 會把 ".[,stare" 取代為 "ಠ_ಠ"。

==============================================================================
4.  Vim 7.3 的問題                                    *ime-plugin-for-vim-7.3*

根據測試，在 Vim 7.3 使用
>
    function("s:Handler")
<
會在執行時找不到該函式，產生 |E117| 例外。

解決的方式是把該函式改為全域宣告，建議使用 ime_{plugin-name}#handler()
