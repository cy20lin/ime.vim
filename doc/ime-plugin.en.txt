*ime-plugin.en.txt*
                                           ime.vim plugin development document

==============================================================================
這份文件的中文版：|ime-plugin.txt|

Index

1.  Introduction............................|ime-plugin-introduction.en|
    1.1 Plugin metadata.....................|ime-plugin-metadata.en|
2.  Folder structure........................|ime-plugin-structure.en|
    2.1 Plugin with huge data...............|ime-plugin-with-huge-data.en|
3.  Handler - the core of the plugin........|ime-plugin-handler.en|
    3.1 Handler - complicated operations....|ime-plugin-complex-handler.en|
4.  Log message.............................|ime#log().en|
5.  Script-local function in Vim 7.3........|ime-plugin-for-vim-7.3-funcref.en|

==============================================================================
1.  Introduction                                  *ime-plugin-introduction.en*

ime.vim is able to load third party plugins if they fit certain structure.

There are two kinds ot ime.vim plugins:

1)  Standalone plugins work as input modes, they show up in the menu when you
    are choosing input mode. They have their own icons and descriptions.

2)  Embedded plugins are embedded in every input mode,
    prior to the input modes.
    They can be considered as extensions to the input modes.

------------------------------------------------------------------------------
1.1 Plugin metadata                                   *ime-plugin-metadata.en*

To make your plugin recognizable to ime.vim, the plugin has to provide
necessary informations:

- Type: |string|, "standalone" or "embedded"
- Pattern: |regex|, the string pattern that can be processed by this plugin
- Handler: |Funcref|, process the input string and returns the result
- Trigger: |List|[|string|], what keys should trigger this plugin to work

Standalone plugin should provide two additional informations:

- Icon: |string|, shown in mode selection menu and 'statusline'
- Description: |string|, shown in mode selection menu

Further more, this plugin should decide a name: {plugin-name}
for user to add in |g:ime_plugins.en|.
讓使用者加在 |g:ime_plugins| 之中。

這些資訊需要包裝成一個物件並透過 *ime_{plugin-name}#info().en* 回傳：
>
    function ime_{plugin-name}#info()
        return {
            \ 'type': 'standalone' / 'embedded',
            \ 'pattern': {regex},
            \ 'handler': {function},
            \ 'icon': '[En]',
            \ 'description': {description},
            \ 'trigger': ['<space>', '3', '4', '6', ...],
            \ }
    endfunction
<
==============================================================================
2.  Folder structure                                 *ime-plugin-structure.en*

ime.vim 的套件建議依照以下的目錄結構放置檔案：
>
    {plugin-folder}/
    |-- autoload/
    |   `-- ime_{plugin-name}.vim
    `-- README
<
*ime_{plugin-name}.vim.en* 為套件的主要檔案，建議的內容為：
>
    function! ime_{plugin-name}#handler (matchobj, trigger)
        " plugin logic here
    endfunction

    function! ime_{plugin-name}#info()
        return {
            \ 'type': 'standalone',
            \ 'icon': '[eg]',
            \ 'description': 'An example',
            \ 'pattern': '.*$',
            \ 'handler': function('ime_{plugin-name}#handler'),
            \ 'trigger': ['<space>', '3', '4', '6', ...],
            \ }
    endfunction
<
請依照自己的需求對以上的內容做調整。
注意 handler 的值為 function("s:Handler")，引號不可省略。

------------------------------------------------------------------------------
2.1 Plugin with huge data                       *ime-plugin-with-huge-data.en*

若套件需要載入龐大的資料，可以利用 vim 的 |autoload| 功能

在 {plugin-folder}/autoload/ 目錄裡增加一個 *ime_{plugin-name}_table.vim.en* 檔案：
>
    let s:table = {}
    let s:table['key_1'] = [...]
    let s:table['key_2'] = [...]
    ...
    let s:table['key_n'] = [...]

    function! ime_{plugin-name}_table#table ()
        return s:table
    endfunction
<

|ime_{plugin-name}.vim| 檔案調整為：
>
    let s:table = {}

    function! ime_{plugin-name}#handler (matchobj)
        if s:table == {}
            let s:table = ime_{plugin-name}_table#table()
        endif

        " plugin logic here
    endfunction

    function! ime_{plugin-name}#info()
        return {
            \ 'type': 'standalone',
            \ 'icon': '[eg]',
            \ 'description': 'An example',
            \ 'pattern': '.*$',
            \ 'handler': function('ime_{plugin-name}#handler'),
            \ 'trigger': ['<space>', '3', '4', '6', ...],
            \ }
    endfunction
<
==============================================================================
3.  Handler - the core of the plugin                   *ime-plugin-handler.en*

套件的核心功能由 handler 提供。

在切換到輸入法的時候，ime.vim 會根據套件提供的 trigger 資訊執行 |inoremap|。
使用者若按下了其中一個 trigger 按鍵，
ime.vim 會將編輯區該行的文字與套件提供的 pattern 傳入 |matchlist()| 進行比對。
若比對成功，該結果（一個 |List|）和 trigger 按鍵會一起被傳入 handler。

handler 需要針對 matchobj 以及 trigger 進行處理及判斷，
並回傳一個 |List|，包含可用的選項。
回傳選項的順序可以由套件自行決定。

輸入時產生的選單透過 |complete()| 產生，每個選項可以帶有說明文字，
詳細資訊請見 |complete-items|。

套件提供的 pattern 可以包含 regex groups（請參考 |\1|），
提供 handler 判斷使用。

------------------------------------------------------------------------------
3.1 Handler - complicated operations           *ime-plugin-complex-handler.en*

有些套件需要做很複雜的判斷，例如嘸蝦米模式會做多階段的比對，
每次放棄一部份的字串，這樣複雜程度只靠 pattern 處理是非常困難的。

因此，ime.vim 允許 handler 回傳 |Dictionary|，包含兩個 key：

- "len": 實際上比對到的長度
- "options": 比對到可用的選項

例如 ime.vim 根據 pattern 比對到 ".[,stare"，傳入 handler。
但 handler 決定只有 ",stare" 能被比對為 "ಠ_ಠ"，
此時應回傳
>
    {
    \ 'len': 6,
    \ 'options': ['ಠ_ಠ']
    \ }
<
使 ime.vim 把 ".[,stare" 取代為 ".[ಠ_ಠ"

若直接回傳 ['ಠ_ಠ']，ime.vim 會把 ".[,stare" 取代為 "ಠ_ಠ"。

==============================================================================
4.  Log message                                                 *ime#log().en*

人有失神，馬有亂蹄，吃飯哪有不掉飯米粒的，吃燒餅哪有不掉芝麻的，
寫程式總會需要 debug，需要 log 訊息。

ime#log({logtag}, {...})

{logtag} log 訊息的標籤，會附在訊息的最前方。
         這個參數沒有強制性，只要開發者方便識別即可。
{...}    log 訊息，可傳入任意參數（實際上限為 20 個，請參考 |...|）
         每個參數會被轉型為 |string| 以後，以空白字元分隔。

為了使用方便，你可以自行將 |ime#log()| 包裝：
>
    function! s:log (...)
        call call(function('ime#log'), ['my-tag'] + a:000)
    endfunction
<
這樣就不需要在每次呼叫 |ime#log()| 時都要寫一次 {logtag}。

==============================================================================
5.  Script-local function in Vim 7.3        *ime-plugin-for-vim-7.3-funcref.en*

根據這個討論串：

http://vim.1045645.n5.nabble.com/Funcref-and-script-local-functions-td1151686.html

Script-local 的函式（s: 開頭的函式）是沒辦法正常在外部使用的。
也就是說套件的 handler 不應該宣告為這樣的形式。

但根據測試，在 Vim 7.4 以上，
>
    function("s:Handler")
<
可以成功的拿來宣告為套件的 handler。

如果你想要把 handler 用這個方式隱藏起來，
請記得在文件中註明它和 Vim 7.3 不相容。
